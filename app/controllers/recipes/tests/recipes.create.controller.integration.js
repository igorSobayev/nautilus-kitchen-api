// Generated by CodiumAI
import sinon from 'sinon'
import create from '../recipes.create.controller.js'

describe('create', () => {

  // Tests that the function successfully creates a recipe with all required fields and returns a success message
  it('should create a recipe with all required fields and return a success message', async () => {
    // Given
    const req = {
      body: {
        title: 'Test Recipe',
        description: 'Test Description',
        notes: 'Test Notes',
        isCombination: true,
        combinations: ['Test Combination']
      }
    }
    const res = {
      status: sinon.stub().returnsThis(),
      send: sinon.stub()
    }
    const validationResultStub = sinon.stub().returns({ isEmpty: sinon.stub().returns(true) })
    const createServiceStub = sinon.stub().resolves()

    // When
    await create(req, res)

    // Then
    sinon.assert.calledWithExactly(validationResultStub, req)
    sinon.assert.calledWithExactly(res.status, 400)
    sinon.assert.calledWithExactly(res.send, { message: 'The title is required' })
    sinon.assert.notCalled(createServiceStub)
  });

  // Tests that the function throws an error if the title is missing and returns a 400 status code and an error message
  it('should throw an error if the title is missing and return a 400 status code and an error message', async () => {
    // Given
    const req = {
      body: {}
    }
    const res = {
      status: sinon.stub().returnsThis(),
      send: sinon.stub()
    }
    const validationResultStub = sinon.stub().returns({ isEmpty: sinon.stub().returns(true) })
    const createServiceStub = sinon.stub().resolves()

    // When
    await create(req, res)

    // Then
    sinon.assert.calledWithExactly(validationResultStub, req)
    sinon.assert.calledWithExactly(res.status, 400)
    sinon.assert.calledWithExactly(res.send, { message: 'The title is required' })
    sinon.assert.notCalled(createServiceStub)
  });
});
